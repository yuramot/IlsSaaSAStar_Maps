unit TestAStar64_core;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Windows, AStar64.extra, System.Generics.Collections, AStar64.Common,
  DateUtils, UFileStructures, UGeoSimple, SysUtils, UGeoHash, UGeoPosition, Math,
  AStar64.core, AStar64.Intf;

type
  PCarKey = ^TCarKey;

  TCarKey = record
    Speed: Integer;      ///< Средняя скорость машины (не учитывая типы дорог).
    Zones: UInt64; ///< Биты недоступных для проезда типов зон, 0x0 - все зоны доступны для проезда.
  end;

  // Test methods for class TAstar


  TestTAstar = class(TTestCase)
  strict private
    FCarKey: TCarKey;
    FAstar: TAstar;

    FReturnValue: Integer;
    FRDistance, FRDuration: Double;
    FRHashString: String;
    FRSpeedlineString: PAnsiChar;

    function Exec(
      var RDistance, RDuration: Double;
      var RHashString: string;
//      const y1,x1,y2,x2: Double;
      const AStr: string;
      const ATimeOut: Integer = CTimeoutDef;
      const ALenTreshold: Double = CReductionTresholdDef
//      const AZones: TZonesMask = CZonesMaskDef;
//      const ARoadSpeeds: PRoadSpeedsRecord = nil
    ): Integer;
    procedure cr3(const AFromLatitude, AFromLongitude, AToLatitude, AToLongitude: double);
  private

  public
    procedure SetUp; override;
    procedure TearDown; override;

    procedure TestCalc_001;
    procedure TestCalc_002;
    procedure TestCountDD;
    procedure TestMakeHash;
    procedure TestMakeSpeedline;
  published
    procedure TestCalc_Fail;
    procedure TestCalc_Success_Long_001;
    procedure TestCalc_Success_Long_001r;
    procedure TestCalc_Success_Long_002;
    procedure TestCalc_Success_Long_002r;
    procedure TestCalc_Success_Long_003;
    procedure TestCalc_Success_Long_003r;
    procedure TestCalc_Success_Long_004;
    procedure TestCalc_Success_Long_004r;
    procedure TestCalc_Success_Long_005;
    procedure TestCalc_Success_Long_006;
    procedure TestCalc_Success_Long_007;
    procedure TestCalc_Success_Long_008;
    procedure TestCalc_Success_Long_009;
    procedure TestCalc_Success_Long_010_Total;

    procedure TestCalc_Success_CreateRouteWithPath3_001;
    procedure TestCalc_Success_CreateRouteWithPath3_001_speed;
    procedure TestCalc_Success_CreateRouteWithPath3_002;
    procedure TestCalc_Success_CreateRouteWithPath3_003;
  end;

implementation

function GetDigits(var s: string): string;
var
  Started: Boolean;
begin
  Result := '';
  Started := False;
  while Length(s) > 0 do
  begin
    if (s[1] in ['0'..'9','.']) then
    begin
      if not Started  then
        Started := True;;
      Result := Result + s[1];
    end else
      if Started then
        Break;

    Delete(s, 1, 1);
  end;

end;

function GetGeo(var s: string): Double;
var
  fs: TFormatSettings;
begin
  fs := TFormatSettings.Create;
  fs.DecimalSeparator := '.';
  Result := StrToFloatDef(GetDigits(s), 0, fs);
end;

function GetSpeed(var s: string): Integer;
begin
  Result := StrToIntDef(GetDigits(s), 90);
end;

function GetZones(var s: string): UInt64;
begin
  Result := StrToInt64Def(GetDigits(s), 0);
end;


//------------------------------------------------------------------------------
//! выдаём скорость на основе "уровня" дороги
//------------------------------------------------------------------------------
function RoadSpeedByType(
  const AType: Integer
): Integer;
begin
  case AType of
    11, 12: Result := 110;
    13, 14: Result := 90;
    15, 16: Result := 70; // 70?
    21, 22: Result := 60;
    31, 32: Result := 60;
    41, 42, 43: Result := 40;
    else Result := 60;
  end;
end;

//------------------------------------------------------------------------------
//! процедура обратного вызова для рассчёта скорости
//------------------------------------------------------------------------------
function CallBack(
  const AHandle: Pointer;
  const AMetaData: Pointer
): Integer; stdcall;
begin
  Result := RoadSpeedByType(PMetaDataV1(AMetaData)^.RoadType);
end;

function CreateRouteCallback(const AHandle: Pointer; const AMetaData: Pointer): Integer; stdcall;
var
  pMetaData: PMetaDataV1;
  pCarHandle: PCarKey;
  iCarSpeed: Integer;
  iRoadSpeed: Integer;
begin
  pCarHandle := PCarKey(AHandle);
  pMetaData := PMetaDataV1(AMetadata);

  if ((pCarHandle.Zones and pMetaData.Zones) <> 0) then
    Exit(-1);

  iCarSpeed := pCarHandle.Speed;
  iRoadSpeed := pMetaData.Restrictions and $FF;
  if (iCarSpeed <= 0) and (iRoadSpeed <= 0) then // нет ни скорости машины, ни скорости дороги - ошибка
    Exit(40)
  else if (iCarSpeed <= 0) then // нет скорости машины, ипользуем 0.8 от максимальной скорости дороги
    Exit(Trunc(0.8 * iRoadSpeed))
  else if (iRoadSpeed>0) and (iCarSpeed>iRoadSpeed) then// скорость машины больше допустимой по дороге - используем допустимую
    Exit(iRoadSpeed)
  else  // иначе используем скорость машины
    Exit(iCarSpeed)
end;

procedure TestTAstar.SetUp;
begin
//  FAstar := TAstar.Create(@FCarKey, CreateRouteCallback, -1);
//  FAstar := TAstar.Create(@FCarKey, CreateRouteCallback, 1);
  FCarKey.Speed := 50;
  FCarKey.Zones := 0;
end;

procedure TestTAstar.TearDown;
begin
//  FAstar.Free;
//  FAstar := nil;
end;

procedure TestTAstar.cr3(const AFromLatitude, AFromLongitude, AToLatitude,
  AToLongitude: double);
var
 AstarRequest: TAstarRequest;
begin
  with AstarRequest do begin
    Version           := 1;
    FromLatitude      := AFromLatitude;
    FromLongitude     := AFromLongitude;
    ToLatitude        := AToLatitude;
    ToLongitude       := AToLongitude;
    ZonesLimit        := 0;
//    RoadSpeedsRecord  := CRoadSpeedsDef;
    with
      RoadSpeedsRecord do begin// := CRoadSpeedsDef;
      Motorway := 35;
      MotorwayLink := Trunc( 35 / 2);
      Trunk := 35;
      TrunkLink := Trunc( 35 / 2);
      Primary := 35;
      PrimaryLink := Trunc( 35 / 2);
      Secondary := 35;
      SecondaryLink := Trunc( 35 / 2);
      Tertiary := 35;
      TertiaryLink := Trunc( 35 / 2);
      Residential := 35;
      Road := 35;
      Unclassified := 35;
      reverse := 35;//60;
    end;
    FormatVariant     := 0;
    LenTreshold       := CReductionTresholdDef;
    Timeout           := 300;
    Distance          := 0;;
    Duration          := 0;
    BufferLen         := 1000000;
    HashString        := GetMemory(BufferLen);

    try
      CheckTrue(CreateRouteWithPath3(@AstarRequest) = 0);
    finally
      FreeMemory(HashString);
    end;
  end;
end;

function TestTAstar.Exec(
  var RDistance, RDuration: Double;
  var RHashString: string;
  const AStr: string;
//  const y1,x1,y2,x2: Double;
  const ATimeOut: Integer = CTimeoutDef;
  const ALenTreshold: Double = CReductionTresholdDef
//  const AZones: TZonesMask = CZonesMaskDef;
//  const ARoadSpeeds: PRoadSpeedsRecord = nil
): Integer;
var
  s: string;
//  speeds: t
  RoadSpeedsRecord: TRoadSpeedsRecord;
  FromLatitude,
  FromLongitude,
  ToLatitude,
  ToLongitude: Double;
  Speed: Integer;
  ZonesLimit: UInt64;
  HashString: PAnsiChar;
begin
  s := AStr;
  FromLatitude := GetGeo(s);
  FromLongitude := GetGeo(s);
  ToLatitude := GetGeo(s);
  ToLongitude := GetGeo(s);
  Speed := GetSpeed(s);
  GetRoadSpeedsKToDef(@RoadSpeedsRecord, Speed, 0);
  ZonesLimit:= GetZones(s);

//  GetGeo(s),GetGeo(s),GetGeo(s),GetGeo(s), ATimeOut, ALenTreshold, GetZones
  FAstar := TAstar.Create(
    {@FCarKey, CreateRouteCallback,}
    FromLatitude, FromLongitude, ToLatitude, ToLongitude,
    ATimeOut, ALenTreshold, ZonesLimit, @RoadSpeedsRecord);// 0);
  Result := FAstar.Calc();
  if Result = 0 then
  begin
    FAStar.CountDD(RDistance, RDuration);
    FAStar.MakeHash(HashString);
//    FAStar.MakeSpeedline(RHashString);
    RHashString := HashString;
    FreeMem(HashString);
  end;

  FAstar.Free;
end;


procedure TestTAstar.TestCalc_Fail;
begin
//грейн  ReturnValue := FAstar.Calc(54.621196, 39.69051, 56.761304, 60.820014);

//  ReturnValue := Exec(60.058542,30.426213, 60.029103,30.405511);

//  ReturnValue := Exec(60.029103,30.405511, 60.024293,30.395171);
//  ReturnValue := Exec(60.024293,30.395171, 59.986214,30.296321);
//  ReturnValue := Exec(59.986214,30.296321, 60.005324,30.328022);
//  ReturnValue := Exec(60.005324,30.328022, 60.052384,30.339889);
//  ReturnValue := Exec(60.052384,30.339889, 60.046949,30.326693);
//  ReturnValue := Exec(60.046949,30.326693, 60.047483,30.320117);
//  ReturnValue := Exec(60.047483,30.320117, 60.005437,30.299034);
//  ReturnValue := Exec(60.005437,30.299034, 60.001989,30.279992);
//  ReturnValue := Exec(60.001989,30.279992, 60.000285,30.271949);
//  ReturnValue := Exec(60.000285,30.271949, 60.007492,30.270512);
//  ReturnValue := Exec(60.007492,30.270512, 60.020832,30.256801);
//  ReturnValue := Exec(60.020832,30.256801, 60.021461,30.252811);
//  ReturnValue := Exec(60.021461,30.252811, 60.027327,30.235765);
//  ReturnValue := Exec(60.027327,30.235765, 60.018012,30.228990);
//  ReturnValue := Exec(60.018012,30.228990, 60.011387,30.261987);
//  ReturnValue := Exec(60.011387,30.261987, 60.010951,30.261457);
//  ReturnValue := Exec(60.010951,30.261457, 60.008074,30.257408);
//  ReturnValue := Exec(60.008074,30.257408, 60.009107,30.248971);
//  ReturnValue := Exec(60.009107,30.248971, 59.989612,30.201162);
//  ReturnValue := Exec(59.989612,30.201162, 60.002122,30.243372);
//  ReturnValue := Exec(60.002122,30.243372, 59.988640,30.208933);
//  ReturnValue := Exec(59.988640,30.208933, 59.987114,30.234148);
//  ReturnValue := Exec(59.987114,30.234148, 59.984834,30.259887);
//  ReturnValue := Exec(59.984834,30.259887, 59.987669,30.305478);
//  ReturnValue := Exec(59.987669,30.305478, 60.000303,30.328238);
//  ReturnValue := Exec(60.000303,30.328238, 60.058542,30.426213);
//  ReturnValue := Exec(60.058542,30.426213, 60.056170,30.323605);
//  ReturnValue := Exec(60.056170,30.323605, 59.859998,30.248539);
//  ReturnValue := Exec(59.859998,30.248539, 59.838164,30.269811);
//  ReturnValue := Exec(59.838164,30.269811, 59.814928,30.291040);
//  ReturnValue := Exec(59.814928,30.291040, 59.841341,30.159171);
//  ReturnValue := Exec(59.841341,30.159171, 59.850929,30.193347);
//  ReturnValue := Exec(59.850929,30.193347, 59.852335,30.247785);
//  ReturnValue := Exec(59.852335,30.247785, 59.827514,30.399124);
//  ReturnValue := Exec(59.827514,30.399124, 59.828774,30.399031);
//
//
//  ReturnValue := Exec(59.8277984601301,30.3988930312805, 59.8280141707264,30.3987750055294)

//  ReturnValue := Exec(59.877332,30.318928, 60.058542,30.426213);
//  ReturnValue := Exec(60.058542,30.426213, 60.103446,29.975820);
//  ReturnValue := Exec(60.103446,29.975820, 59.871995,29.913810);

//

//грейн
//ReturnValue := Exec(54.621196,39.69051, 56.761304,60.820014);

//от виктора

//ReturnValue := Exec(55.746406,49.110684, 55.621755,51.794757);
//ReturnValue := Exec(55.621755,51.794757, 55.674783,52.307264);
//ReturnValue := Exec(55.674783,52.307264, 55.585454,52.490215);
//ReturnValue := Exec(55.585454,52.490215, 55.635070,52.624061);
//ReturnValue := Exec(55.635070,52.624061, 55.743482,52.435022);
//ReturnValue := Exec(55.743482,52.435022, 55.721600,52.385669);
//ReturnValue := Exec(55.721600,52.385669, 55.757237,51.999564);
//ReturnValue := Exec(55.757237,51.999564, 55.763741,49.197539);
//ReturnValue := Exec(55.763741,49.197539, 55.746406,49.110684);
//ReturnValue := Exec(55.746406,49.110684, 55.788500,49.126195);
//ReturnValue := Exec(55.788500,49.126195, 55.791820,49.111534);
//ReturnValue := Exec(55.791820,49.111534, 55.828850,49.080848);
//ReturnValue := Exec(55.828850,49.080848, 55.867526,49.001994);
//ReturnValue := Exec(55.867526,49.001994, 55.828632,49.194673);
//ReturnValue := Exec(55.828632,49.194673, 55.825042,49.196129);
//ReturnValue := Exec(55.825042,49.196129, 55.845421,49.320238);
//ReturnValue := Exec(55.845421,49.320238, 55.836453,52.089989);
//ReturnValue := Exec(55.836453,52.089989, 55.746406,49.110684);
//ReturnValue := Exec(55.746406,49.110684, 55.621755,51.794757);
//ReturnValue := Exec(55.621755,51.794757, 55.721600,52.385669);
//ReturnValue := Exec(55.721600,52.385669, 55.635070,52.624061);
//ReturnValue := Exec(55.635070,52.624061, 55.585454,52.490215);
//ReturnValue := Exec(55.585454,52.490215, 55.674783,52.307264);
//ReturnValue := Exec(55.674783,52.307264, 55.757237,51.999564);
//ReturnValue := Exec(55.757237,51.999564, 55.763741,49.197539);
//ReturnValue := Exec(55.746406,49.110684, 55.845421,49.320238);
//ReturnValue := Exec(55.845421,49.320238, 55.828632,49.194673);
//ReturnValue := Exec(55.828632,49.194673, 55.825042,49.196129);
//ReturnValue := Exec(55.825042,49.196129, 55.867526,49.001994);
//ReturnValue := Exec(55.867526,49.001994, 55.828850,49.080848);
//ReturnValue := Exec(55.828850,49.080848, 55.791820,49.111534);
//ReturnValue := Exec(55.791820,49.111534, 55.788500,49.126195);
//ReturnValue := Exec(55.788500,49.126195, 55.743482,52.435022);
//55,8262087223964
//37,342441457116
//55,6670981127791
//37,5582490172535
//ReturnValue := Exec(53.1716328883847, 49.6098135679024, 53.1962722768539, 50.1208025788914);//254с

//ReturnValue := Exec(54.633253913531, 39.7249634572296, 56.8446582019898, 60.3771373702731);

//ReturnValue := Exec(53.5273870541503, 49.4143662356438, 53.2277247811449, 50.2472429479726);//6.5с
//55,8272669428288, 37,3437554349533, 55,7033714191695, 37,4559446383596

end;


//длинные маршруты
procedure TestTAstar.TestCalc_Success_CreateRouteWithPath3_001;
var
 AstarRequest: TAstarRequest;
begin
  with AstarRequest do begin
    Version           := 1;
    FromLatitude      := 55.8269984008765;
    FromLongitude     := 37.3439161109207;
    ToLatitude        := 55.705152673129;
    ToLongitude       := 37.45480097221;
    ZonesLimit        := 0;
    RoadSpeedsRecord  := CRoadSpeedsDef;
    FormatVariant     := 0;
    LenTreshold       := CReductionTresholdDef;
    Timeout           := 300;
    Distance          := 0;;
    Duration          := 0;
    BufferLen         := 1000000;
    HashString        := GetMemory(BufferLen);

    try
      CheckTrue(CreateRouteWithPath3(@AstarRequest) = 0);
    finally
      FreeMemory(HashString);
    end;
  end;
end;

procedure TestTAstar.TestCalc_Success_CreateRouteWithPath3_001_speed;
var
 AstarRequest: TAstarRequest;
begin
  with AstarRequest do begin
    Version           := 1;
    FromLatitude      := 55.8269984008765;
    FromLongitude     := 37.3439161109207;
    ToLatitude        := 55.705152673129;
    ToLongitude       := 37.45480097221;
    ZonesLimit        := 0;
    RoadSpeedsRecord  := CRoadSpeedsDef;
    FormatVariant     := 1;
    LenTreshold       := CReductionTresholdDef;
    Timeout           := 300;
    Distance          := 0;;
    Duration          := 0;
    BufferLen         := 1000000;
    HashString        := GetMemory(BufferLen);

    try
      CheckTrue(CreateRouteWithPath3(@AstarRequest) = 0);
    finally
      FreeMemory(HashString);
    end;
  end;
end;

procedure TestTAstar.TestCalc_Success_CreateRouteWithPath3_002;
begin
  cr3(60.058542, 30.426213, 59.838164, 30.269811);
end;

procedure TestTAstar.TestCalc_Success_CreateRouteWithPath3_003;
begin
  cr3(55.978543, 37.174820, 55.892127, 37.179203);
end;




procedure TestTAstar.TestCalc_Success_Long_001;
begin
//1
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '53.2422731630489, 50.2571932238876, 53.2679465040196, 49.185764652459'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_001r;
begin
  //1 rev
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '53.2679465040196,  49.185764652459,  53.2422731630489,  50.2571932238876'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_002;
begin
  //2
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '53.2049316881607,  50.1532115126348,  53.5074794177191,  49.4573211016759'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_002r;
begin
  //2 rev
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '53.5074794177191,  49.4573211016759,  53.2049316881607,  50.1532115126348'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_003;
begin
  //3
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '55.8269984008765,  37.3439161109207,  55.705152673129,  37.45480097221'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_003r;
begin
  //3 rev
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '55.705152673129,  37.45480097221,  55.8269984008765,  37.3439161109207'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_004;
begin
  //4
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '54.633253913531,  39.7249634572296,  56.846340799665,  60.5510504137514'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_004r;
begin
  //4 rev
  FReturnValue := Exec(
    FRDistance, FRDuration, FRHashString,
    '56.846340799665,    60.5510504137514,    54.633253913531,    39.7249634572296'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_005;
begin
  //4 rev
  FReturnValue := Exec(
    FRDistance, FRDuration, FRHashString,
    '54.618092, 39.678047, 57.777973, 40.934197'
  );
  CheckEquals(FReturnValue, 0);
end;


procedure TestTAstar.TestCalc_Success_Long_006;
begin
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '57.306543, 61.921052, 57.058126, 63.777969'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_007;
begin
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '57.012293, 63.732155, 57.282946, 62.000634'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_008;
begin
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '[56.504506,60.815460]-[57.282946,62.000634] 50 0'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_009;
begin
  FReturnValue := Exec(
  FRDistance, FRDuration, FRHashString,
  '[55.765124,37.852585]-[55.782358,37.868465] 90 4'
  );
  CheckEquals(FReturnValue, 0);
end;

procedure TestTAstar.TestCalc_Success_Long_010_Total;
begin
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.762738,37.670717] 28 2 = 0.135s 22.7355 0.0352494 26.8746    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.762738,37.670717]-[55.766830,37.657997] 28 2 = 0.057s 1.952 0.00287672 28.273      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.766830,37.657997]-[55.783139,37.642671] 28 2 = 0.071s 3.04064 0.00468659 27.0331   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.783139,37.642671]-[55.797073,37.633473] 28 2 = 0.06s 3.50388 0.00525843 27.764     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.797073,37.633473]-[55.818154,37.646651] 28 2 = 0.051s 4.83923 0.0071795 28.0848    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.818154,37.646651]-[55.816600,37.637965] 28 2 = 0.049s 1.45083 0.00226825 26.6511   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.816600,37.637965]-[55.806565,37.628963] 28 2 = 0.075s 1.83595 0.00315258 24.2651   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.806565,37.628963]-[55.793915,37.615479] 28 2 = 0.096s 3.43572 0.00555383 25.7759   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.793915,37.615479]-[55.784395,37.622244] 28 2 = 0.081s 1.84933 0.00309839 24.8695   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.784395,37.622244]-[55.785878,37.601034] 28 2 = 0.099s 2.53826 0.00444485 23.7941   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.785878,37.601034]-[55.776958,37.607529] 28 2 = 0.063s 1.55815 0.00244365 26.5681   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.776958,37.607529]-[55.780122,37.632592] 28 2 = 0.091s 2.3203 0.00443192 21.8143    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.780122,37.632592]-[55.774973,37.631909] 28 2 = 0.062s 0.828875 0.00100115 34.4969  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.774973,37.631909]-[55.770314,37.624642] 28 2 = 0.083s 1.58158 0.00217484 30.3007   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.770314,37.624642]-[55.760099,37.646848] 28 2 = 1.857s 0 0 -nan(ind)                 '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.760099,37.646848]-[55.754086,37.652661] 28 2 = 0.453s 2.22146 0.00295403 31.3337   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.754086,37.652661]-[55.757278,37.612856] 28 2 = 1.669s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.757278,37.612856]-[55.747976,37.596022] 28 2 = 2.419s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.747976,37.596022]-[55.754913,37.566678] 28 2 = 1.765s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.754913,37.566678]-[55.744406,37.567401] 28 2 = 0.039s 3.16823 0.00528747 24.9665   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.744406,37.567401]-[55.731901,37.607763] 28 2 = 0.036s 4.2163 0.00628002 27.9743    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.731901,37.607763]-[55.713679,37.615866] 28 2 = 0.036s 6.06154 0.00943578 26.7666   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.713679,37.615866]-[55.635243,37.658122] 28 2 = 0.032s 12.165 0.0182149 27.8274     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.635243,37.658122]-[55.755327,37.645321] 28 2 = 2.034s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.755327,37.645321]-[55.675419,37.938276] 28 2 = 2.042s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.720859,37.787084] 28 6 = 0.041s 13.0184 0.0197963 27.4008    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.720859,37.787084]-[55.705665,37.767869] 28 6 = 0.028s 3.97492 0.00673595 24.5877   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.705665,37.767869]-[55.698827,37.770951] 28 6 = 0.024s 1.96856 0.00266937 30.7277   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.698827,37.770951]-[55.696788,37.745232] 28 6 = 0.024s 2.54282 0.00372749 28.4242    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.696788,37.745232]-[55.702815,37.736554] 28 6 = 0.02s 1.90025 0.00355728 22.2578    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.702815,37.736554]-[55.701075,37.657233] 28 6 = 0.045s 12.4513 0.0209032 24.8193    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.701075,37.657233]-[55.729138,37.709497] 28 6 = 0.023s 5.92029 0.00841726 29.3063   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.729138,37.709497]-[55.738485,37.777760] 28 6 = 0.036s 10.2492 0.0155233 27.5103    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.738485,37.777760]-[55.749354,37.786213] 28 6 = 0.023s 1.87299 0.00243447 32.0569   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.749354,37.786213]-[55.758934,37.773502] 28 6 = 0.022s 3.05548 0.00459779 27.6897   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.758934,37.773502]-[55.752090,37.761806] 28 6 = 0.022s 2.92608 0.00527253 23.1236   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.752090,37.761806]-[55.749177,37.750667] 28 6 = 0.021s 1.78871 0.0024972 29.8454    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.749177,37.750667]-[55.753255,37.715552] 28 6 = 0.029s 9.11618 0.01578 24.071       '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.753255,37.715552]-[55.754578,37.694953] 28 6 = 0.032s 4.70792 0.00575977 34.0575   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.754578,37.694953]-[55.781291,37.711509] 28 6 = 0.041s 6.44509 0.00903987 29.7068   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.781291,37.711509]-[55.784091,37.690731] 28 6 = 0.025s 1.59225 0.00240766 27.5553   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.784091,37.690731]-[55.786455,37.678837] 28 6 = 0.029s 1.34736 0.00197294 28.4549   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.786455,37.678837]-[55.792326,37.706470] 28 6 = 0.029s 2.79523 0.00417044 27.927     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.792326,37.706470]-[55.797402,37.720447] 28 6 = 0.023s 2.30249 0.00335365 28.6068   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.797402,37.720447]-[55.675419,37.938276] 28 6 = 0.383s 25.4584 0.0422542 25.1043    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.774517,37.543434] 28 6 = 0.08s 33.6315 0.0508446 27.5607     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.774517,37.543434]-[55.784622,37.523177] 28 6 = 0.054s 2.74687 0.00429722 26.6342   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.784622,37.523177]-[55.794006,37.511589] 28 6 = 0.036s 2.51478 0.00402573 26.0282   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.794006,37.511589]-[55.805189,37.516727] 28 6 = 0.05s 5.59181 0.0095094 24.5012     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.805189,37.516727]-[55.789411,37.571821] 28 6 = 0.038s 5.15536 0.0090621 23.7039    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.789411,37.571821]-[55.797326,37.578585] 28 6 = 0.054s 3.34731 0.00509122 27.3945   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.797326,37.578585]-[55.800565,37.586509] 28 6 = 0.072s 2.47397 0.00349566 29.4885   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.800565,37.586509]-[55.812089,37.576816] 28 6 = 0.061s 2.91971 0.00471581 25.7971   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.812089,37.576816]-[55.825507,37.569755] 28 6 = 0.046s 2.91563 0.00444459 27.3332   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.825507,37.569755]-[55.838430,37.573842] 28 6 = 0.047s 2.23505 0.00312216 29.8277   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.838430,37.573842]-[55.777783,37.586877] 28 6 = 1.059s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.777783,37.586877]-[55.874334,37.513817] 28 6 = 0.812s 0 0 -nan(ind)                 '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.874334,37.513817]-[55.880086,37.520168] 28 6 = 0.017s 1.55091 0.00214817 30.082    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.880086,37.520168]-[55.919967,37.500648] 28 6 = 0.019s 6.56557 0.010557 25.9131     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.919967,37.500648]-[55.905714,37.544701] 28 6 = 0.015s 6.52677 0.0106257 25.5935    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.905714,37.544701]-[55.845789,37.579789] 28 6 = 0.02s 10.2912 0.0154597 27.7367     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.845789,37.579789]-[55.809398,37.597118] 28 6 = 0.025s 4.85742 0.00811543 24.9392   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.809398,37.597118]-[55.820920,37.623870] 28 6 = 0.027s 3.80202 0.00610244 25.9597   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.820920,37.623870]-[55.675419,37.938276] 28 6 = 0.429s 33.2113 0.0522117 26.5038    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.834912,37.657614] 28 14 = 0.891s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.834912,37.657614]-[55.854805,37.650918] 28 14 = 1.144s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.854805,37.650918]-[55.867036,37.638485] 28 14 = 2.069s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.867036,37.638485]-[55.865147,37.594540] 28 14 = 1.126s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.865147,37.594540]-[55.890058,37.587964] 28 14 = 0.777s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.890058,37.587964]-[55.900193,37.585808] 28 14 = 0.891s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.900193,37.585808]-[55.926000,37.605751] 28 14 = 0.504s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.926000,37.605751]-[55.961883,37.584928] 28 14 = 0.039s 12.8265 0.0206711 25.8545   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.961883,37.584928]-[56.014821,37.483050] 28 14 = 0.034s 14.0258 0.0213786 27.3361   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.014821,37.483050]-[56.075423,37.550136] 28 14 = 0.024s 16.7497 0.0257592 27.0933   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.075423,37.550136]-[55.949375,37.646687] 28 14 = 0.058s 28.6209 0.0461622 25.8336   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.949375,37.646687]-[55.923528,37.660170] 28 14 = 0.014s 3.79854 0.00585062 27.0523  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.923528,37.660170]-[55.869849,37.660314] 28 14 = 1.021s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.869849,37.660314]-[55.863328,37.681191] 28 14 = 0.854s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.863328,37.681191]-[55.948704,37.831479] 28 14 = 1.086s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.948704,37.831479]-[55.675419,37.938276] 28 14 = 19.984s 49.7602 0.0831638 24.9308  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.790656,37.800281] 28 6 = 0.085s 22.319 0.0359826 25.8446     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.790656,37.800281]-[55.797387,37.815669] 28 6 = 0.029s 2.33178 0.00381523 25.4658   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.797387,37.815669]-[55.806904,37.799805] 28 6 = 0.025s 2.37315 0.00396841 24.9171   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.806904,37.799805]-[55.806940,37.780015] 28 6 = 0.034s 2.82302 0.00398176 29.5412   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.806940,37.780015]-[55.817232,37.765457] 28 6 = 0.036s 2.79245 0.00427486 27.2177    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.817232,37.765457]-[55.789608,37.752481] 28 6 = 0.032s 6.06922 0.0102439 24.6863    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.789608,37.752481]-[55.781626,37.734578] 28 6 = 0.031s 2.27352 0.00395936 23.9256   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.781626,37.734578]-[55.660297,37.760270] 28 6 = 0.229s 19.0283 0.0305773 25.9292    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.660297,37.760270]-[55.654340,37.765749] 28 6 = 0.023s 2.35751 0.00369868 26.558    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.654340,37.765749]-[55.650323,37.731236] 28 6 = 0.022s 3.73645 0.00581081 26.7923   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.650323,37.731236]-[55.646914,37.746912] 28 6 = 0.02s 2.03715 0.00290535 29.2156    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.646914,37.746912]-[55.618791,37.715022] 28 6 = 0.031s 7.54838 0.0119331 26.3566    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.618791,37.715022]-[55.600384,37.796104] 28 6 = 0.025s 8.05061 0.0129753 25.8523    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.600384,37.796104]-[55.658439,37.839268] 28 6 = 0.019s 16.5559 0.0262771 26.2522    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.658439,37.839268]-[55.675419,37.938276] 28 6 = 0.028s 9.55221 0.0159667 24.9274    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.727009,37.471587] 28 6 = 0.527s 40.266 0.0619513 27.0818     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.727009,37.471587]-[55.725803,37.435610] 28 6 = 0.047s 4.00075 0.00627574 26.5623   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.725803,37.435610]-[55.716448,37.406971] 28 6 = 0.031s 2.80602 0.00498975 23.4315   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.716448,37.406971]-[55.724515,37.385924] 28 6 = 0.032s 3.21066 0.00450344 29.7056    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.724515,37.385924]-[55.746122,37.405094] 28 6 = 0.04s 4.75436 0.00697222 28.4125    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.746122,37.405094]-[55.746649,37.421353] 28 6 = 0.041s 1.67711 0.00255307 27.3708   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.746649,37.421353]-[55.770568,37.421380] 28 6 = 0.04s 4.05799 0.00693858 24.3685    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.770568,37.421380]-[55.758772,37.434118] 28 6 = 0.035s 2.35987 0.00306324 32.0994   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.758772,37.434118]-[55.780826,37.452112] 28 6 = 0.047s 7.38159 0.0112078 27.4422    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.780826,37.452112]-[55.790216,37.483014] 28 6 = 0.045s 4.56455 0.00780677 24.3621   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.790216,37.483014]-[55.809686,37.465960] 28 6 = 0.036s 2.91026 0.00478081 25.3641   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.809686,37.465960]-[55.823789,37.441393] 28 6 = 0.033s 5.77972 0.00931967 25.8401   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.823789,37.441393]-[55.675419,37.938276] 28 6 = 0.123s 41.5284 0.0632031 27.3776    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.888760,37.433526] 28 6 = 0.094s 47.1033 0.0720685 27.2329    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.888760,37.433526]-[55.900128,37.382393] 28 6 = 0.025s 5.17934 0.00843827 25.5747   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.900128,37.382393]-[55.854249,37.357402] 28 6 = 0.067s 11.3068 0.0184474 25.5385    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.854249,37.357402]-[55.841832,37.366565] 28 6 = 0.025s 3.30937 0.00481502 28.6376   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.841832,37.366565]-[55.798374,37.388245] 28 6 = 0.03s 8.02954 0.0124604 26.8501      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.798374,37.388245]-[55.791953,37.381021] 28 6 = 0.021s 1.39885 0.00179069 32.549    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.791953,37.381021]-[55.835275,37.292544] 28 6 = 0.047s 13.0945 0.0195143 27.9592    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.835275,37.292544]-[55.836494,37.295643] 28 6 = 0.018s 1.75868 0.00250783 29.2197   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.836494,37.295643]-[55.836494,37.295643] 28 6 = 0.017s 0.426689 0.000444468 40      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.836494,37.295643]-[55.837025,37.293038] 28 6 = 0.014s 2.3283 0.00306358 31.6664    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.837025,37.293038]-[55.890542,37.300575] 28 6 = 0.256s 15.8418 0.0244746 26.9698    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.890542,37.300575]-[55.675419,37.938276] 28 6 = 0.086s 53.1989 0.0801295 27.663     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.700562,37.692663] 28 2 = 0.071s 22.7802 0.0355076 26.7316    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.700562,37.692663]-[55.707867,37.700487] 28 2 = 0.03s 1.80973 0.00261901 28.7915    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.707867,37.700487]-[55.717274,37.677804] 28 2 = 0.028s 3.1548 0.00492905 26.6685    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.717274,37.677804]-[55.710002,37.662722] 28 2 = 0.026s 2.31102 0.0031964 30.1253    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.710002,37.662722]-[55.692861,37.662210] 28 2 = 0.028s 4.92668 0.00710223 28.9034   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.692861,37.662210]-[55.676042,37.666566] 28 2 = 0.032s 2.7309 0.00381951 29.7911    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.676042,37.666566]-[55.690419,37.601456] 28 2 = 0.063s 8.29075 0.0140536 24.5807     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.690419,37.601456]-[55.682737,37.625612] 28 2 = 0.059s 5.92086 0.00993929 24.8209   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.682737,37.625612]-[55.678707,37.634631] 28 2 = 0.049s 2.72243 0.00483624 23.4552   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.678707,37.634631]-[55.653644,37.620698] 28 2 = 0.044s 4.31199 0.00780262 23.0264   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.653644,37.620698]-[55.625791,37.636590] 28 2 = 0.063s 7.80944 0.013457 24.1803     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.625791,37.636590]-[55.675419,37.938276] 28 2 = 0.207s 26.6158 0.0451294 24.5736    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.632586,37.476752] 28 2 = 0.149s 39.986 0.0613059 27.1765     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.632586,37.476752]-[55.658759,37.487362] 28 2 = 0.023s 4.84915 0.00695085 29.0681   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.658759,37.487362]-[55.675555,37.498932] 28 2 = 0.031s 3.77328 0.00571299 27.5198   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675555,37.498932]-[55.684924,37.524363] 28 2 = 0.037s 3.46637 0.00493973 29.2388   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.684924,37.524363]-[55.723359,37.517545] 28 2 = 0.047s 8.24726 0.0136358 25.2011    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.723359,37.517545]-[55.736980,37.525738] 28 2 = 0.07s 9.17903 0.0147196 25.983      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.736980,37.525738]-[55.688872,37.568848] 28 2 = 0.052s 8.6464 0.0135558 26.5766     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.688872,37.568848]-[55.708633,37.521893] 28 2 = 0.039s 5.31413 0.00937275 23.624    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.708633,37.521893]-[55.702295,37.505982] 28 2 = 0.027s 1.84706 0.00249629 30.83      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.702295,37.505982]-[55.654041,37.539401] 28 2 = 0.045s 9.41054 0.0160184 24.4785    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.654041,37.539401]-[55.662933,37.522486] 28 2 = 0.034s 2.75517 0.00426409 26.9222   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.662933,37.522486]-[55.675419,37.938276] 28 2 = 0.319s 35.3379 0.0550176 26.7625    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.907935,37.866019] 28 14 = 2.529s 44.4759 0.0729013 25.4201   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.907935,37.866019]-[55.943981,37.875964] 28 14 = 0.024s 6.46019 0.0110066 24.4558   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.943981,37.875964]-[55.967622,37.937606] 28 14 = 0.259s 13.657 0.0255767 22.2484    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.967622,37.937606]-[55.974907,37.899670] 28 14 = 0.015s 3.50699 0.00630584 23.1729  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.974907,37.899670]-[55.964685,37.888639] 28 14 = 0.014s 1.78096 0.00309375 23.986   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.964685,37.888639]-[55.944223,37.853748] 28 14 = 0.034s 9.47207 0.0179782 21.9526   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.944223,37.853748]-[55.920189,37.857539] 28 14 = 0.02s 4.21733 0.0072691 24.1738    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.920189,37.857539]-[55.905694,37.850209] 28 14 = 0.014s 2.57604 0.00392121 27.3729  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.905694,37.850209]-[55.908727,37.702921] 28 14 = 0.043s 13.9893 0.023861 24.4285    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.908727,37.702921]-[55.858822,37.424300] 28 14 = 1.002s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.858822,37.424300]-[55.675419,37.938276] 28 14 = 1.167s 0 0 -nan(ind)                '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.660480,37.991819] 28 14 = 0.048s 10.7409 0.0162716 27.5041   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.660480,37.991819]-[55.699172,38.028228] 28 14 = 0.103s 10.8962 0.0181705 24.9862   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.699172,38.028228]-[55.740015,38.015212] 28 14 = 0.043s 7.21774 0.0130976 22.9614   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.740015,38.015212]-[55.793693,38.011753] 28 14 = 0.05s 12.3519 0.0221284 23.2581    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.793693,38.011753]-[55.820728,37.968670] 28 14 = 0.029s 8.14904 0.0147186 23.0691   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.820728,37.968670]-[55.798409,37.961879] 28 14 = 0.026s 3.00073 0.00476092 26.2619  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.798409,37.961879]-[55.727435,37.972712] 28 14 = 0.035s 10.7377 0.0190462 23.4905   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.727435,37.972712]-[55.597135,37.986240] 28 14 = 0.337s 22.6419 0.0367416 25.677    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.597135,37.986240]-[55.670351,37.950757] 28 14 = 0.045s 11.1326 0.0175428 26.4415   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.670351,37.950757]-[55.702972,37.962543] 28 14 = 0.156s 13.5191 0.0232729 24.204    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.702972,37.962543]-[55.675419,37.938276] 28 14 = 0.037s 8.65193 0.0154298 23.3636   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.501993,37.601978] 28 6 = 0.047s 37.7826 0.0580945 27.0985    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.501993,37.601978]-[55.538183,37.661652] 28 6 = 0.091s 13.1839 0.0219142 25.0673    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.538183,37.661652]-[55.351298,37.632350] 28 6 = 0.222s 36.2924 0.058812 25.7121      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.351298,37.632350]-[55.408736,37.572737] 28 6 = 0.04s 18.1184 0.027841 27.1159      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.408736,37.572737]-[55.473082,37.543740] 28 6 = 0.043s 10.7914 0.0169934 26.4597    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.473082,37.543740]-[55.542915,37.723538] 28 6 = 0.603s 25.2959 0.0412965 25.5226    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.542915,37.723538]-[55.592571,37.612686] 28 6 = 0.04s 15.0101 0.0238865 26.183      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.592571,37.612686]-[55.606075,37.556397] 28 6 = 0.037s 9.99042 0.0162121 25.6763    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.606075,37.556397]-[55.604097,37.607862] 28 6 = 0.057s 11.5804 0.0182991 26.3682    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.604097,37.607862]-[55.668356,37.523294] 28 6 = 0.051s 12.4554 0.02038 25.4649      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.668356,37.523294]-[55.675419,37.938276] 28 6 = 0.448s 33.456 0.0511648 27.2453     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.778274,37.893634] 28 14 = 0.425s 18.3487 0.0323076 23.6641   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.778274,37.893634]-[55.773565,37.846499] 28 14 = 0.796s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.773565,37.846499]-[55.769079,37.832611] 28 14 = 0.922s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.769079,37.832611]-[55.711650,37.888010] 28 14 = 1.298s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.711650,37.888010]-[55.691587,37.919622] 28 14 = 0.04s 6.77405 0.0112922 24.9954    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.691587,37.919622]-[55.753225,37.868382] 28 14 = 0.049s 11.2235 0.0187479 24.944     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.753225,37.868382]-[55.734658,37.831021] 28 14 = 0.218s 8.31581 0.0135942 25.4881   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.734658,37.831021]-[55.718735,37.824634] 28 14 = 0.683s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.718735,37.824634]-[55.678209,37.886214] 28 14 = 0.498s 0 0 -nan(ind)               '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.678209,37.886214]-[55.675419,37.938276] 28 14 = 0.016s 4.56362 0.00704504 26.9908  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.923478,37.814043] 28 14 = 14.081s 48.3175 0.0796222 25.2848  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.923478,37.814043]-[55.932798,37.824670] 28 14 = 0.027s 6.03328 0.00994304 25.2827  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.932798,37.824670]-[56.011590,37.858033] 28 14 = 0.018s 11.3237 0.0184701 25.545    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.011590,37.858033]-[56.062047,37.858159] 28 14 = 0.019s 7.44529 0.0124919 24.8338   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.062047,37.858159]-[55.963350,37.808330] 28 14 = 0.714s 18.0222 0.0319589 23.4966   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.963350,37.808330]-[55.967582,37.759848] 28 14 = 0.016s 3.99816 0.0066069 25.2145   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.967582,37.759848]-[55.930428,37.775110] 28 14 = 0.015s 8.19201 0.0131096 26.0369   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.930428,37.775110]-[55.930055,37.795367] 28 14 = 0.043s 11.0243 0.0174929 26.2589   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.930055,37.795367]-[55.922661,37.789357] 28 14 = 0.024s 6.13758 0.00988793 25.8631  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.922661,37.789357]-[55.675419,37.938276] 28 14 = 14.629s 51.0889 0.0840476 25.3273   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.594107,38.126450] 28 6 = 0.039s 22.4639 0.0339584 27.563     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.594107,38.126450]-[55.565814,38.176684] 28 6 = 0.018s 6.74934 0.0120976 23.2461    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.565814,38.176684]-[55.329667,38.219803] 28 6 = 5.457s 41.3184 0.0623074 27.6307    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.329667,38.219803]-[55.241893,38.202142] 28 6 = 0.012s 11.2958 0.0171028 27.5193    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.241893,38.202142]-[55.195729,38.363390] 28 6 = 0.024s 23.1519 0.0382723 25.2052    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.195729,38.363390]-[55.419422,38.254577] 28 6 = 0.1s 35.4051 0.0560935 26.2992      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.419422,38.254577]-[55.716935,38.215913] 28 6 = 1.714s 48.8882 0.0838512 24.2931    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.716935,38.215913]-[55.658850,38.100695] 28 6 = 0.355s 18.3476 0.0310614 24.612     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.658850,38.100695]-[55.675419,37.938276] 28 6 = 0.16s 18.3438 0.0276371 27.6558     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.892127,37.179203] 28 0 = 0.315s 63.0105 0.0957536 27.4187    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.892127,37.179203]-[55.860292,37.120957] 28 0 = 0.085s 9.96788 0.0158904 26.1371    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.860292,37.120957]-[55.857584,37.117804] 28 0 = 0.019s 0.560746 0.000683796 34.1687 '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.857584,37.117804]-[55.811240,37.080542] 28 0 = 0.08s 12.4023 0.0217532 23.7557     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.811240,37.080542]-[55.791719,37.039345] 28 0 = 0.027s 7.07121 0.0118649 24.8325     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.791719,37.039345]-[55.672494,37.281144] 28 0 = 0.511s 33.9524 0.0534682 26.4584    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.672494,37.281144]-[55.840892,37.177874] 28 0 = 0.299s 26.9658 0.0492316 22.8222    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.840892,37.177874]-[55.675419,37.938276] 28 0 = 0.325s 59.0948 0.089182 27.6096     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.919135,37.757943] 28 14 = 24.67s 52.699 0.0870462 25.2256    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.919135,37.757943]-[55.911058,37.748125] 28 14 = 0.016s 2.21122 0.00288571 31.9278  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.911058,37.748125]-[55.891214,37.730428] 28 14 = 0.057s 8.37945 0.0126526 27.5945   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.891214,37.730428]-[55.969597,37.719693] 28 14 = 0.209s 13.7015 0.0235592 24.2324   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.969597,37.719693]-[55.998025,37.712030] 28 14 = 0.023s 4.90715 0.00818088 24.993   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.998025,37.712030]-[55.933080,37.753434] 28 14 = 0.02s 11.0414 0.0179585 25.6179    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.933080,37.753434]-[55.900854,37.736024] 28 14 = 0.025s 6.8246 0.0105683 26.9067    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.900854,37.736024]-[55.675419,37.938276] 28 14 = 19.862s 56.3987 0.0933394 25.1764  '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.190323,37.427812] 28 6 = 0.173s 82.8061 0.123075 28.0337     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.190323,37.427812]-[55.155494,37.467203] 28 6 = 0.014s 7.49472 0.0121952 25.6067    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.155494,37.467203]-[55.152547,37.617249] 28 6 = 0.012s 16.6137 0.0286649 24.1493     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.152547,37.617249]-[55.255677,37.617294] 28 6 = 0.037s 31.8806 0.0507384 26.1805    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.255677,37.617294]-[55.675419,37.938276] 28 6 = 0.147s 76.8004 0.119233 26.8384     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.983489,37.408930] 28 6 = 0.121s 60.7532 0.0937156 27.0113    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.983489,37.408930]-[55.992754,37.215799] 28 6 = 0.023s 15.8254 0.0255213 25.8369    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.992754,37.215799]-[56.012179,37.202075] 28 6 = 0.009s 2.98213 0.00407812 30.4688   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.012179,37.202075]-[55.978543,37.174820] 28 6 = 0.014s 6.11958 0.00889921 28.6523   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.978543,37.174820]-[55.938482,37.313592] 28 6 = 0.059s 12.1011 0.0224098 22.4997    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.938482,37.313592]-[55.675419,37.938276] 28 6 = 0.075s 56.4839 0.0869575 27.0649    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.387095,38.186161] 28 6 = 0.03s 44.9485 0.0684343 27.3672     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.387095,38.186161]-[55.339283,37.808482] 28 6 = 0.016s 25.8046 0.0398254 26.9976    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.339283,37.808482]-[55.920401,37.729835] 28 6 = 0.051s 77.4664 0.117095 27.5654     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.920401,37.729835]-[55.829436,37.817951] 28 6 = 0.041s 19.4874 0.0298729 27.1809    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.829436,37.817951]-[55.675419,37.938276] 28 6 = 0.034s 23.4461 0.037446 26.0888     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.675419,37.938276]-[55.540918,37.082823] 28 0 = 0.121s 66.6257 0.101383 27.3819      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.540918,37.082823]-[55.477960,37.008227] 28 0 = 0.025s 15.0008 0.0254014 24.6062    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.477960,37.008227]-[55.345007,37.148140] 28 0 = 0.045s 28.6631 0.0449292 26.5817    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.345007,37.148140]-[55.413090,37.188321] 28 0 = 0.01s 13.3555 0.0198804 27.9913     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.413090,37.188321]-[55.675419,37.938276] 28 0 = 0.053s 68.9138 0.106201 27.0375     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.862201,37.986582] 28 6 = 0.375s 30.3181 0.0491796 25.6865    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.862201,37.986582]-[55.916966,37.992646] 28 6 = 0.02s 8.74095 0.0130247 27.9627     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.916966,37.992646]-[55.928638,37.988523] 28 6 = 0.013s 2.6665 0.00415474 26.7415    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.928638,37.988523]-[55.955685,38.059472] 28 6 = 0.013s 6.58471 0.0108108 25.3787    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.955685,38.059472]-[55.675419,37.938276] 28 6 = 0.361s 43.3364 0.0685319 26.3481    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.629262,37.002092] 28 6 = 0.366s 70.3427 0.106462 27.5305     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.629262,37.002092]-[55.729184,36.859493] 28 6 = 0.012s 18.3006 0.0282403 27.0013    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.729184,36.859493]-[55.673966,37.038976] 28 6 = 0.117s 25.8025 0.0464787 23.1311    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.673966,37.038976]-[55.675419,37.938276] 28 6 = 0.11s 66.8088 0.101753 27.3574      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.675419,37.938276]-[56.078146,37.057985] 28 2 = 0.132s 79.0944 0.120084 27.444       '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.078146,37.057985]-[56.178859,36.986263] 28 2 = 0.013s 17.4361 0.0270187 26.8889    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.178859,36.986263]-[56.121496,37.057958] 28 2 = 0.008s 13.8443 0.0220654 26.1425    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.121496,37.057958]-[55.675419,37.938276] 28 2 = 0.086s 82.3443 0.125291 27.3844     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.427693,37.273446] 28 6 = 0.05s 61.9363 0.0954785 27.0289     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.427693,37.273446]-[55.516909,37.352039] 28 6 = 0.011s 16.8529 0.028563 24.5843     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.516909,37.352039]-[55.687462,37.547944] 28 6 = 0.022s 25.3704 0.0384684 27.4797    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.687462,37.547944]-[55.675419,37.938276] 28 6 = 0.07s 30.6855 0.047254 27.0572      '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.194727,37.878856] 28 2 = 0.038s 71.0352 0.0977376 30.2831    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.194727,37.878856]-[55.373675,38.044012] 28 2 = 0.036s 33.2484 0.0556348 24.9007    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.373675,38.044012]-[55.486872,37.979126] 28 2 = 0.016s 25.9433 0.0437605 24.702     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.486872,37.979126]-[55.675419,37.938276] 28 2 = 0.374s 34.6923 0.0541847 26.6775    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.873950,37.399946] 28 2 = 0.065s 47.4706 0.073064 27.0714     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.873950,37.399946]-[55.902596,37.401429] 28 2 = 0.022s 5.53746 0.00897448 25.7093   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '55.902596,37.401429]-[55.675419,37.938276] 28 2 = 0.094s 48.1641 0.0737167 27.2236     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.740674,37.500567] 28 2 = 0.133s 33.9753 0.0526634 26.8808    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.740674,37.500567]-[55.777930,37.515425] 28 2 = 0.049s 7.4344 0.0128666 24.0753     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.777930,37.515425]-[55.675419,37.938276] 28 2 = 0.191s 34.3224 0.0530116 26.9771    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.654396,37.441431] 28 2 = 0.296s 42.3344 0.0644761 27.358     '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.654396,37.441431]-[55.450879,37.743381] 28 2 = 0.039s 39.6311 0.0588316 28.0682    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.450879,37.743381]-[55.675419,37.938276] 28 2 = 0.084s 39.6156 0.0582992 28.3135    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[55.373470,37.377480] 28 2 = 0.184s 58.1367 0.0910636 26.6008    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.373470,37.377480]-[55.641920,37.523456] 28 2 = 0.774s 42.7013 0.0662533 26.8548    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.641920,37.523456]-[55.675419,37.938276] 28 2 = 1.397s 36.9025 0.0596364 25.7829    '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[55.675419,37.938276]-[56.088549,37.498698] 28 14 = 74.357s 91.1518 0.150403 25.2521   '));
CheckEquals(0, Exec(FRDistance, FRDuration, FRHashString, '[56.088549,37.498698]-[55.563634,38.262724] 28 14 = 232.187s 117.803 0.191005 25.6981  '));
end;

procedure TestTAstar.TestCalc_001;
begin
//  ReturnValue := FAstar.Calc(
//    54.621196, 39.69051,
//    56.761304, 60.820014
//  );
end;

procedure TestTAstar.TestCalc_002;
var
  FReturnValue: Integer;
begin
//  ReturnValue := FAstar.Calc(
//    56.761304, 60.820014,
//    54.621196, 39.69051
//  );
end;

//[59.877332,30.318928]-[60.058542,30.426213] 35 0 = 20.469s 27.8639 0.793527
//[60.058542,30.426213]-[60.103446,29.975820] 35 0 = 47.417s 37.8186 1.07854
//[60.103446,29.975820]-[59.871995,29.913810] 35 0 = 76.091s 50.8725 1.45244

procedure TestTAstar.TestCountDD;
begin
  // TODO: Setup method call parameters
  FAstar.CountDD(FRDistance, FRDuration);
  // TODO: Validate method results
end;

procedure TestTAstar.TestMakeHash;
begin
  // TODO: Setup method call parameters
//  FAstar.MakeHash(FRHashString);
  // TODO: Validate method results
end;

procedure TestTAstar.TestMakeSpeedline;
begin
  // TODO: Setup method call parameters
//  FAstar.MakeSpeedline(FRSpeedlineString);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAstar.Suite);
end.

